user_active
---------------------


DO
$do$
DECLARE
  f_schema text;
BEGIN

FOR f_schema IN
    SELECT quote_ident(nspname)
    FROM   pg_namespace n
    WHERE  nspname !~~ 'pg_%'
    AND    nspname <>  'information_schema'
    AND    nspname <> 'xdb'
    AND    nspname <> 'c'
    AND    nspname <> 'e'
    AND    nspname <> 'migration'
    AND    nspname <> 'public'
LOOP
   EXECUTE 'SET LOCAL search_path = ' || f_schema;

    DROP TRIGGER IF EXISTS trig_change_user_active ON users;
    DROP FUNCTION IF EXISTS change_user_active;
    DROP TABLE IF EXISTS user_active;
    ALTER TABLE users
        DROP COLUMN IF EXISTS is_active,
        DROP COLUMN IF EXISTS activated_at,
        DROP COLUMN IF EXISTS deactivated_at;

     ALTER TABLE users ADD COLUMN IF NOT EXISTS is_active bool NOT NULL DEFAULT 'f'::bool;
     ALTER TABLE users ADD COLUMN IF NOT EXISTS activated_at timestamp without time zone;
     ALTER TABLE users ADD COLUMN IF NOT EXISTS deactivated_at timestamp without time zone;

     UPDATE users SET is_active = 't'::bool
        WHERE status in (1, 2);

     UPDATE users SET activated_at = adate
        WHERE adate IS NOT NULL;

     UPDATE users SET activated_at = created_at
        WHERE adate IS NULL and status in (1, 2);

    UPDATE users SET deactivated_at = last_edit_at
        WHERE activated_at IS NOT NULL
        AND status NOT IN (1, 2);

   CREATE TABLE IF NOT EXISTS user_active (
        id serial primary key not null,
        created_at timestamp without time zone not null default timezone('utc'::text, now()),
        user_id int not null,
        is_active bool not null
   );

   INSERT INTO user_active(created_at, user_id, is_active)
     SELECT activated_at, id, 't'::bool
     FROM users
     WHERE activated_at IS NOT NULL
        ORDER BY activated_at ASC;

   INSERT INTO user_active(created_at, user_id, is_active)
     SELECT deactivated_at, id, 'f'::bool
     FROM users
     WHERE deactivated_at IS NOT NULL
        ORDER BY deactivated_at ASC;

    CREATE OR REPLACE FUNCTION change_user_active()
    RETURNS trigger AS
    $BODY$
    BEGIN
        INSERT INTO user_active(user_id, is_active)
        VALUES(OLD.user_id, NEW.is_active);

        IF NEW.is_active THEN
            NEW.activated_at = timezone('utc', now());
        ELSE
            NEW.deactivated_at = timezone('utc', now());
        END IF;

        RETURN NEW;
    END;
    $BODY$

     CREATE TRIGGER trig_change_user_active
     BEFORE UPDATE OF is_active ON users
     FOR EACH ROW
     EXECUTE PROCEDURE change_user_active();

END LOOP;

END
$do$
