-- migrate config

DO
$do$
DECLARE
  f_schema text;
BEGIN
FOR f_schema IN
    SELECT quote_ident(nspname)
    FROM   pg_namespace n
    WHERE  nspname !~~ 'pg_%'
    AND    nspname <> 'information_schema'
    AND    nspname <> 'xdb'
    AND    nspname <> 'c'
    AND    nspname <> 'e'
    AND    nspname <> 'migration'
    AND    nspname <> 'public'
LOOP
   EXECUTE 'SET LOCAL search_path = ' || f_schema;
     create table if not exists config  (
          created_at timestamp without time zone not null default timezone('utc'::text, now()),
          last_edit_at timestamp without time zone not null default timezone('utc'::text, now()),
          edit_count int not null default 0,
          id text primary key,
          user_id int,
          data jsonb not null default '{}'::jsonb);
END LOOP;
END
$do$


------------- CONFIG -------------------------

DO
$do$
DECLARE
  f_schema text;
BEGIN
FOR f_schema IN
    SELECT quote_ident(nspname)
    FROM   pg_namespace n
    WHERE  nspname !~~ 'pg_%'
    AND    nspname <> 'information_schema'
    AND    nspname <> 'xdb'
    AND    nspname <> 'c'
    AND    nspname <> 'e'
    AND    nspname <> 'migration'
    AND    nspname <> 'public'
LOOP
   EXECUTE 'SET LOCAL search_path = ' || f_schema;

     INSERT INTO config (id) SELECT 'system'
          WHERE NOT EXISTS (SELECT 't'::boolean from config where id = 'system');

     INSERT INTO config (id) SELECT 'mail'
          WHERE NOT EXISTS (SELECT 't'::boolean from config where id = 'mail');

     INSERT INTO config (id) SELECT 'periodic_mail'
          WHERE NOT EXISTS (SELECT 't'::boolean from config where id = 'periodic_mail');

     INSERT INTO config (id) SELECT 'transactions'
          WHERE NOT EXISTS (SELECT 't'::boolean from config where id = 'transactions');

     INSERT INTO config (id) SELECT 'messages'
          WHERE NOT EXISTS (SELECT 't'::boolean from config where id = 'messages');

     INSERT INTO config (id) SELECT 'users'
          WHERE NOT EXISTS (SELECT 't'::boolean from config where id = 'users');

     INSERT INTO config (id) SELECT 'register_form'
          WHERE NOT EXISTS (SELECT 't'::boolean from config where id = 'register_form');

     INSERT INTO config (id) SELECT 'contact_form'
          WHERE NOT EXISTS (SELECT 't'::boolean from config where id = 'contact_form');

     INSERT INTO config (id) SELECT 'support_form'
          WHERE NOT EXISTS (SELECT 't'::boolean from config where id = 'support_form');

     INSERT INTO config (id) SELECT 'news'
          WHERE NOT EXISTS (SELECT 't'::boolean from config where id = 'news');

     UPDATE config SET data = jsonb_set(data, '{sort}', '{}'::jsonb)
          where id = 'news';

     UPDATE config SET data = jsonb_set(data, '{currency}', '{}'::jsonb)
          where id = 'transactions';

     UPDATE config SET data = jsonb_set(data, '{categories}', '{}'::jsonb)
          where id = 'messages';

     UPDATE config SET data = jsonb_set(data, '{cleanup}', '{}'::jsonb)
          where id = 'messages';

     UPDATE config SET data = jsonb_set(data, '{cleanup, enabled}', 'true'::jsonb)
          where id = 'messages';

     UPDATE config SET data = jsonb_set(data, '{cleanup, after_days}', (select data->>'value'
          from xdb.aggs
          where agg_type = 'setting'
               and agg_schema = f_schema
               and eland_id = 'msgexpcleanupdays')::jsonb)
          where id = 'messages';

     UPDATE config SET data = jsonb_set(data, '{sort, asc}', 'true'::jsonb)
          where id = 'news';

     UPDATE config SET data = jsonb_set(data, '{modules,contact,enabled}', 'false'::jsonb)
          where id = 'news' and exists (select 1
               from xdb.aggs
               where agg_type = 'setting'
                    and agg_schema = f_schema
                    and eland_id = 'news_order_asc'
                    and (data->>'value' = '0'
                         or data->>'value' = ''
                         or data->>'value' IS NULL));

     UPDATE config SET data = jsonb_set(data, '{guest_blocks}', '[]'::jsonb)
          where id = 'periodic_mail';

     UPDATE config SET data = jsonb_set(data, '{user_blocks}', coalesce((select jsonb_agg(to_jsonb(t.unnest))
          from (select unnest(string_to_array(ltrim(a.data->>'value', '+'), ','))
               from xdb.aggs a
               where agg_type = 'setting'
                    and eland_id = 'periodic_mail_block_ary'
                    and agg_schema = f_schema) t), '["messages.recent"]'::jsonb))
          WHERE id = 'periodic_mail';

     UPDATE config SET data = jsonb_set(data, '{days}', (select data->>'value'
          from xdb.aggs
          where agg_type = 'setting'
               and agg_schema = f_schema
               and eland_id = 'saldofreqdays')::jsonb)
          where id = 'periodic_mail';

     UPDATE config SET data = jsonb_set(data, '{modules}',
               '{"messages":{"enabled":true, "access": "guest"},"users":{"enabled":true, "access": "guest"}, "transactions":{"enabled": true, "access":"guest"}, "news":{"enabled":true, "access": "guest"}, "docs":{"enabled":true, "access":"guest"}, "forum":{"enabled":true, "access":"guest"}, "support":{"enabled": true, "access": "user"}, "home": {"enabled":true}, "login": {"enabled":true}, "contact":{"enabled":true}, "register":{"enabled":true}}'::jsonb)
          where id = 'system';

     UPDATE config SET data = jsonb_set(data, '{modules,contact,enabled}', 'false'::jsonb)
          where id = 'system' and exists (select 1
               from xdb.aggs
               where agg_type = 'setting'
                    and agg_schema = f_schema
                    and eland_id = 'contact_form_en'
                    and (data->>'value' = '0'
                         or data->>'value' = ''));

     UPDATE config SET data = jsonb_set(data, '{modules,register,enabled}', 'false'::jsonb)
          where id = 'system' and exists (select 1
               from xdb.aggs
               where agg_type = 'setting'
                    and agg_schema = f_schema
                    and eland_id = 'registration_en'
                    and (data->>'value' = '0'
                         or data->>'value' = ''));

     UPDATE config SET data = jsonb_set(data, '{modules,forum,enabled}', 'false'::jsonb)
          where id = 'system' and exists (select 1
               from xdb.aggs
               where agg_type = 'setting'
                    and agg_schema = f_schema
                    and eland_id = 'forum_en'
                    and (data->>'value' = '0'
                         or data->>'value' = ''));

     UPDATE config SET data = jsonb_set(data, '{website_url}', coalesce((select data->'value'
          from xdb.aggs
          where agg_type = 'setting'
               and agg_schema = f_schema
               and eland_id = 'homepage_url'
               and data->>'value' is not null
               and data->>'value' <> '')::jsonb, 'null'::jsonb))
          where id = 'system';

     UPDATE config SET data = jsonb_set(data, '{default_landing_page}', coalesce((select data->'value'
          from xdb.aggs
          where agg_type = 'setting'
               and agg_schema = f_schema
               and eland_id = 'default_landing_page'
               and data->>'value' is not null
               and data->>'value' <> '')::jsonb, '"messages"'::jsonb))
          where id = 'system';

     UPDATE config SET data = jsonb_set(data, '{currency, name}', (select data->'value'
          from xdb.aggs
          where agg_type = 'setting'
               and agg_schema = f_schema
               and eland_id = 'currency')::jsonb)
          where id = 'transactions';

     UPDATE config SET data = jsonb_set(data, '{currency, per_hour_ratio}', (select data->>'value'
          from xdb.aggs
          where agg_type = 'setting'
               and agg_schema = f_schema
               and eland_id = 'currencyratio')::jsonb)
          where id = 'transactions';

     UPDATE config SET data = jsonb_set(data, '{currency, timebased_en}', (select (case
          when data->>'value' = '0' then 'f'::boolean
          when data->>'value' = '' then 'f'::boolean
          when data->>'value' = 'false' then 'f'::boolean
          else 't'::boolean
          end)::text
          from xdb.aggs
          where agg_type = 'setting'
               and agg_schema = f_schema
               and eland_id = 'template_lets')::jsonb)
          where id = 'transactions';

     UPDATE config SET data = jsonb_set(data, '{global_account_limits}', '{"min": null, "max": null}'::jsonb)
          where id = 'transactions';

     UPDATE config SET data = jsonb_set(data, '{account_equilibrium}', '0'::jsonb)
          where id = 'transactions';

     UPDATE config SET data = jsonb_set(data, '{name}', (select data->'value'
          from xdb.aggs
          where agg_type = 'setting'
               and agg_schema = f_schema
               and eland_id = 'systemname')::jsonb)
          where id = 'system';

     UPDATE config SET data = jsonb_set(data, '{date_format}', (select data->'value'
          from xdb.aggs
          where agg_type = 'setting'
               and agg_schema = f_schema
               and eland_id = 'date_format')::jsonb)
          where id = 'system';

     UPDATE config SET data = jsonb_set(data, '{logo}', (select data->'value'
          from xdb.aggs
          where agg_type = 'setting'
               and agg_schema = f_schema
               and eland_id = 'logo')::jsonb)
          where id = 'system';

     UPDATE config SET data = jsonb_set(data, '{maintenance_en}', (select (case
          when data->>'value' = '0' then 'f'::boolean
          when data->>'value' = '' then 'f'::boolean
          when data->>'value' = 'false' then 'f'::boolean
          else 't'::boolean
          end)::text
          from xdb.aggs
          where agg_type = 'setting'
               and agg_schema = f_schema
               and eland_id = 'maintenance')::jsonb)
          where id = 'system';

     UPDATE config SET data = jsonb_set(data, '{intersystem_en}', (select (case
          when data->>'value' = '0' then 'f'::boolean
          when data->>'value' = '' then 'f'::boolean
          when data->>'value' = 'false' then 'f'::boolean
          else 't'::boolean
          end)::text
          from xdb.aggs
          where agg_type = 'setting'
               and agg_schema = f_schema
               and eland_id = 'interlets_en')::jsonb)
          where id = 'system';

     UPDATE config SET data = jsonb_set(data, '{tag}', (select data->'value'
          from xdb.aggs
          where agg_type = 'setting'
               and agg_schema = f_schema
               and eland_id = 'systemtag')::jsonb)
          where id = 'mail';

     UPDATE config SET data = jsonb_set(data, '{enabled}', (select (case
          when data->>'value' = '0' then 'f'::boolean
          when data->>'value' = '' then 'f'::boolean
          when data->>'value' = 'false' then 'f'::boolean
          else 't'::boolean
          end)::text
          from xdb.aggs
          where agg_type = 'setting'
               and agg_schema = f_schema
               and eland_id = 'mailenabled')::jsonb)
          where id = 'mail';

     UPDATE config SET data = jsonb_set(data, '{mail,admin_addresses}', (select jsonb_agg(to_jsonb(t.unnest))
          from (select unnest(string_to_array(data->>'value', ','))
               from xdb.aggs
               where agg_type = 'setting'
                    and eland_id = 'admin'
                    and agg_schema = f_schema) t))
          WHERE id = 'system';

     UPDATE config SET data = jsonb_set(data, '{id}', ('"'|| public.uuid_generate_v4() ||'"')::jsonb)
          WHERE id = 'system';

END LOOP;
END
$do$
;


------- delete


DO
$do$
DECLARE
  f_schema text;
BEGIN
FOR f_schema IN
    SELECT quote_ident(nspname)
    FROM   pg_namespace n
    WHERE  nspname !~~ 'pg_%'
    AND    nspname <> 'information_schema'
    AND    nspname <> 'xdb'
    AND    nspname <> 'c'
    AND    nspname <> 'e'
    AND    nspname <> 'migration'
    AND    nspname <> 'public'
LOOP
   EXECUTE 'SET LOCAL search_path = ' || f_schema;
     DELETE FROM config WHERE id <> 'mollie';
END LOOP;
END
$do$
;
